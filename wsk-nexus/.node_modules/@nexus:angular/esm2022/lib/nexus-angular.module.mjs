import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { applyPolyfills, defineCustomElements } from '@nexus/core/loader';
import { BooleanValueAccessor } from './directives/boolean-value-accessor';
import { RadioValueAccessor } from './directives/radio-value-accessor';
import { TextValueAccessor } from './directives/text-value-accessor';
import { SelectValueAccessor } from './directives/select-value-accessor';
import { NexusInput, NexusLabel, NexusFormField, NexusErrorMessage, NexusTextarea, NexusIcon, NexusCheckbox, NexusRadio, NexusSelect, NexusLoader, NexusBadge, NexusModal, NexusModalHeader, NexusModalBody, NexusModalFooter, NexusChip, NexusChipGroup, NexusAccordion, NexusAccordionTrigger, NexusAccordionContent, NexusTooltip, NexusTooltipTrigger, NexusTooltipContent, NexusCard, NexusCardHeader, NexusCardBody, NexusCardBodyImage, NexusCardFooter, NexusToast, NexusFileUpload, NexusPagination, NexusTree, NexusTreeTrigger, NexusTreeContent, NexusHeader, NexusHeaderLogo, NexusHeaderMenu, NexusMenu, NexusMenuItem, NexusTabBar, NexusNotification, NexusMessage, NexusModalHeaderSubtitle, NexusCardAvatar, NexusCardHeaderButton, NexusCardHeaderTitle, NexusCardHeaderSubtitle, NexusCardHeaderDetails, NexusFooter, NexusFooterLogo, NexusFooterBottom, NexusFooterColumn, NexusFooterContent, NexusFooterContentTitle, NexusProgressBar, NexusProgressBarLabel, NexusSearch, NexusSearchList, NexusSearchListItem, NexusSlider, NexusPinEntry, NexusToggle, NexusCarousel, NexusCarouselItem, NexusBreadcrumb, NexusBreadcrumbItem, NexusAccordionGroup, NexusDropdown, NexusOption, NexusAvatar, NexusStepper, NexusStepperItem, NexusGaugeChart } from './directives/proxies';
import * as i0 from "@angular/core";
applyPolyfills().then(() => {
    defineCustomElements(window);
});
const DECLARATIONS = [
    BooleanValueAccessor,
    RadioValueAccessor,
    TextValueAccessor,
    SelectValueAccessor,
    NexusInput,
    NexusLabel,
    NexusFormField,
    NexusErrorMessage,
    NexusTextarea,
    NexusIcon,
    NexusCheckbox,
    NexusRadio,
    NexusSelect,
    NexusLoader,
    NexusBadge,
    NexusModal,
    NexusModalHeader,
    NexusModalBody,
    NexusModalFooter,
    NexusChip,
    NexusChipGroup,
    NexusAccordion,
    NexusAccordionTrigger,
    NexusAccordionContent,
    NexusTooltip,
    NexusTooltipTrigger,
    NexusTooltipContent,
    NexusCard,
    NexusCardHeader,
    NexusCardBody,
    NexusCardBodyImage,
    NexusCardFooter,
    NexusToast,
    NexusFileUpload,
    NexusPagination,
    NexusTree,
    NexusTreeTrigger,
    NexusTreeContent,
    NexusHeader,
    NexusHeaderLogo,
    NexusHeaderMenu,
    NexusMenu,
    NexusMenuItem,
    NexusTabBar,
    NexusNotification,
    NexusMessage,
    NexusModalHeaderSubtitle,
    NexusCardAvatar,
    NexusCardHeaderButton,
    NexusCardHeaderTitle,
    NexusCardHeaderSubtitle,
    NexusCardHeaderDetails,
    NexusFooter,
    NexusFooterBottom,
    NexusFooterLogo,
    NexusFooterColumn,
    NexusFooterContent,
    NexusFooterContentTitle,
    NexusProgressBar,
    NexusProgressBarLabel,
    NexusSearch,
    NexusSearchList,
    NexusSearchListItem,
    NexusSlider,
    NexusPinEntry,
    NexusToggle,
    NexusCarousel,
    NexusCarouselItem,
    NexusBreadcrumb,
    NexusBreadcrumbItem,
    NexusAccordionGroup,
    NexusDropdown,
    NexusOption,
    NexusAvatar,
    NexusStepper,
    NexusStepperItem,
    NexusGaugeChart
];
export class NexusAngularModule {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NexusAngularModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.11", ngImport: i0, type: NexusAngularModule, declarations: [BooleanValueAccessor,
            RadioValueAccessor,
            TextValueAccessor,
            SelectValueAccessor,
            NexusInput,
            NexusLabel,
            NexusFormField,
            NexusErrorMessage,
            NexusTextarea,
            NexusIcon,
            NexusCheckbox,
            NexusRadio,
            NexusSelect,
            NexusLoader,
            NexusBadge,
            NexusModal,
            NexusModalHeader,
            NexusModalBody,
            NexusModalFooter,
            NexusChip,
            NexusChipGroup,
            NexusAccordion,
            NexusAccordionTrigger,
            NexusAccordionContent,
            NexusTooltip,
            NexusTooltipTrigger,
            NexusTooltipContent,
            NexusCard,
            NexusCardHeader,
            NexusCardBody,
            NexusCardBodyImage,
            NexusCardFooter,
            NexusToast,
            NexusFileUpload,
            NexusPagination,
            NexusTree,
            NexusTreeTrigger,
            NexusTreeContent,
            NexusHeader,
            NexusHeaderLogo,
            NexusHeaderMenu,
            NexusMenu,
            NexusMenuItem,
            NexusTabBar,
            NexusNotification,
            NexusMessage,
            NexusModalHeaderSubtitle,
            NexusCardAvatar,
            NexusCardHeaderButton,
            NexusCardHeaderTitle,
            NexusCardHeaderSubtitle,
            NexusCardHeaderDetails,
            NexusFooter,
            NexusFooterBottom,
            NexusFooterLogo,
            NexusFooterColumn,
            NexusFooterContent,
            NexusFooterContentTitle,
            NexusProgressBar,
            NexusProgressBarLabel,
            NexusSearch,
            NexusSearchList,
            NexusSearchListItem,
            NexusSlider,
            NexusPinEntry,
            NexusToggle,
            NexusCarousel,
            NexusCarouselItem,
            NexusBreadcrumb,
            NexusBreadcrumbItem,
            NexusAccordionGroup,
            NexusDropdown,
            NexusOption,
            NexusAvatar,
            NexusStepper,
            NexusStepperItem,
            NexusGaugeChart], exports: [BooleanValueAccessor,
            RadioValueAccessor,
            TextValueAccessor,
            SelectValueAccessor,
            NexusInput,
            NexusLabel,
            NexusFormField,
            NexusErrorMessage,
            NexusTextarea,
            NexusIcon,
            NexusCheckbox,
            NexusRadio,
            NexusSelect,
            NexusLoader,
            NexusBadge,
            NexusModal,
            NexusModalHeader,
            NexusModalBody,
            NexusModalFooter,
            NexusChip,
            NexusChipGroup,
            NexusAccordion,
            NexusAccordionTrigger,
            NexusAccordionContent,
            NexusTooltip,
            NexusTooltipTrigger,
            NexusTooltipContent,
            NexusCard,
            NexusCardHeader,
            NexusCardBody,
            NexusCardBodyImage,
            NexusCardFooter,
            NexusToast,
            NexusFileUpload,
            NexusPagination,
            NexusTree,
            NexusTreeTrigger,
            NexusTreeContent,
            NexusHeader,
            NexusHeaderLogo,
            NexusHeaderMenu,
            NexusMenu,
            NexusMenuItem,
            NexusTabBar,
            NexusNotification,
            NexusMessage,
            NexusModalHeaderSubtitle,
            NexusCardAvatar,
            NexusCardHeaderButton,
            NexusCardHeaderTitle,
            NexusCardHeaderSubtitle,
            NexusCardHeaderDetails,
            NexusFooter,
            NexusFooterBottom,
            NexusFooterLogo,
            NexusFooterColumn,
            NexusFooterContent,
            NexusFooterContentTitle,
            NexusProgressBar,
            NexusProgressBarLabel,
            NexusSearch,
            NexusSearchList,
            NexusSearchListItem,
            NexusSlider,
            NexusPinEntry,
            NexusToggle,
            NexusCarousel,
            NexusCarouselItem,
            NexusBreadcrumb,
            NexusBreadcrumbItem,
            NexusAccordionGroup,
            NexusDropdown,
            NexusOption,
            NexusAvatar,
            NexusStepper,
            NexusStepperItem,
            NexusGaugeChart] });
    /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NexusAngularModule });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.11", ngImport: i0, type: NexusAngularModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: DECLARATIONS,
                    imports: [],
                    exports: DECLARATIONS,
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,