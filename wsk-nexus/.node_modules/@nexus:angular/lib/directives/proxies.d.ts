import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';
import { Components } from '@nexus/core';
import * as i0 from "@angular/core";
export declare interface NexusAccordion extends Components.NexusAccordion {
    /**
     * Event fired when the accordion header button is clicked.
     */
    toggleEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusAccordion {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusAccordion, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusAccordion, "nexus-accordion", never, { "open": { "alias": "open"; "required": false; }; "size": { "alias": "size"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusAccordionContent extends Components.NexusAccordionContent {
}
export declare class NexusAccordionContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusAccordionContent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusAccordionContent, "nexus-accordion-content", never, { "size": { "alias": "size"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusAccordionGroup extends Components.NexusAccordionGroup {
}
export declare class NexusAccordionGroup {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusAccordionGroup, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusAccordionGroup, "nexus-accordion-group", never, { "alwaysOpen": { "alias": "alwaysOpen"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusAccordionTrigger extends Components.NexusAccordionTrigger {
    /**
     * Trigger accordion toggle events upon clicking the toggle button.
     */
    _triggerClick: EventEmitter<CustomEvent<any>>;
}
export declare class NexusAccordionTrigger {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusAccordionTrigger, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusAccordionTrigger, "nexus-accordion-trigger", never, { "align": { "alias": "align"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusAvatar extends Components.NexusAvatar {
}
export declare class NexusAvatar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusAvatar, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusAvatar, "nexus-avatar", never, { "alt": { "alias": "alt"; "required": false; }; "avatarClassName": { "alias": "avatarClassName"; "required": false; }; "avatarDark": { "alias": "avatarDark"; "required": false; }; "avatarImageSrc": { "alias": "avatarImageSrc"; "required": false; }; "avatarLogoIcon": { "alias": "avatarLogoIcon"; "required": false; }; "avatarNameDisplay": { "alias": "avatarNameDisplay"; "required": false; }; "avatarNotification": { "alias": "avatarNotification"; "required": false; }; "avatarSize": { "alias": "avatarSize"; "required": false; }; "avatarStatus": { "alias": "avatarStatus"; "required": false; }; "description": { "alias": "description"; "required": false; }; "label": { "alias": "label"; "required": false; }; "size": { "alias": "size"; "required": false; }; "src": { "alias": "src"; "required": false; }; "status": { "alias": "status"; "required": false; }; "type": { "alias": "type"; "required": false; }; "userName": { "alias": "userName"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusBadge extends Components.NexusBadge {
}
export declare class NexusBadge {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusBadge, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusBadge, "nexus-badge", never, { "overlap": { "alias": "overlap"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusBarChart extends Components.NexusBarChart {
    /**
     * On load even on loading bar chart ('nexusBarChartLoaded').
     */
    nexusBarChartLoaded: EventEmitter<CustomEvent<any>>;
}
export declare class NexusBarChart {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusBarChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusBarChart, "nexus-bar-chart", never, { "attrId": { "alias": "attrId"; "required": false; }; "axisLabelFontSize": { "alias": "axisLabelFontSize"; "required": false; }; "axisTickFontFamily": { "alias": "axisTickFontFamily"; "required": false; }; "axisTickFontSize": { "alias": "axisTickFontSize"; "required": false; }; "barStroke": { "alias": "barStroke"; "required": false; }; "barStrokeWidth": { "alias": "barStrokeWidth"; "required": false; }; "canvasHeight": { "alias": "canvasHeight"; "required": false; }; "canvasWidth": { "alias": "canvasWidth"; "required": false; }; "chartData": { "alias": "chartData"; "required": false; }; "chartId": { "alias": "chartId"; "required": false; }; "colorScheme": { "alias": "colorScheme"; "required": false; }; "data": { "alias": "data"; "required": false; }; "gridlines": { "alias": "gridlines"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hideXAxis": { "alias": "hideXAxis"; "required": false; }; "hideXTicks": { "alias": "hideXTicks"; "required": false; }; "hideYAxis": { "alias": "hideYAxis"; "required": false; }; "hideYTicks": { "alias": "hideYTicks"; "required": false; }; "inverse": { "alias": "inverse"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "legendFontSize": { "alias": "legendFontSize"; "required": false; }; "legendMetric": { "alias": "legendMetric"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "linearFormat": { "alias": "linearFormat"; "required": false; }; "linearMetric": { "alias": "linearMetric"; "required": false; }; "linearTickFormat": { "alias": "linearTickFormat"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "maxBarWidth": { "alias": "maxBarWidth"; "required": false; }; "ordinalMetric": { "alias": "ordinalMetric"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "stroke": { "alias": "stroke"; "required": false; }; "strokeWidth": { "alias": "strokeWidth"; "required": false; }; "tooltips": { "alias": "tooltips"; "required": false; }; "valueMetric": { "alias": "valueMetric"; "required": false; }; "width": { "alias": "width"; "required": false; }; "xLabel": { "alias": "xLabel"; "required": false; }; "xTickSize": { "alias": "xTickSize"; "required": false; }; "yLabel": { "alias": "yLabel"; "required": false; }; "yTickSize": { "alias": "yTickSize"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusBreadcrumb extends Components.NexusBreadcrumb {
}
export declare class NexusBreadcrumb {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusBreadcrumb, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusBreadcrumb, "nexus-breadcrumb", never, { "separator": { "alias": "separator"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusBreadcrumbItem extends Components.NexusBreadcrumbItem {
}
export declare class NexusBreadcrumbItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusBreadcrumbItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusBreadcrumbItem, "nexus-breadcrumb-item", never, { "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusCard extends Components.NexusCard {
}
export declare class NexusCard {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCard, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCard, "nexus-card", never, { "bgColor": { "alias": "bgColor"; "required": false; }; "bgImage": { "alias": "bgImage"; "required": false; }; "clickable": { "alias": "clickable"; "required": false; }; "height": { "alias": "height"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusCardAvatar extends Components.NexusCardAvatar {
}
export declare class NexusCardAvatar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardAvatar, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardAvatar, "nexus-card-avatar", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardBody extends Components.NexusCardBody {
}
export declare class NexusCardBody {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardBody, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardBody, "nexus-card-body", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardBodyImage extends Components.NexusCardBodyImage {
}
export declare class NexusCardBodyImage {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardBodyImage, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardBodyImage, "nexus-card-body-image", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardFooter extends Components.NexusCardFooter {
}
export declare class NexusCardFooter {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardFooter, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardFooter, "nexus-card-footer", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardHeader extends Components.NexusCardHeader {
}
export declare class NexusCardHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardHeader, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardHeader, "nexus-card-header", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardHeaderButton extends Components.NexusCardHeaderButton {
}
export declare class NexusCardHeaderButton {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardHeaderButton, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardHeaderButton, "nexus-card-header-button", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardHeaderDetails extends Components.NexusCardHeaderDetails {
}
export declare class NexusCardHeaderDetails {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardHeaderDetails, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardHeaderDetails, "nexus-card-header-details", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardHeaderSubtitle extends Components.NexusCardHeaderSubtitle {
}
export declare class NexusCardHeaderSubtitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardHeaderSubtitle, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardHeaderSubtitle, "nexus-card-header-subtitle", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCardHeaderTitle extends Components.NexusCardHeaderTitle {
}
export declare class NexusCardHeaderTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCardHeaderTitle, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCardHeaderTitle, "nexus-card-header-title", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCarousel extends Components.NexusCarousel {
}
export declare class NexusCarousel {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCarousel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCarousel, "nexus-carousel", never, { "options": { "alias": "options"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusCarouselItem extends Components.NexusCarouselItem {
}
export declare class NexusCarouselItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCarouselItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCarouselItem, "nexus-carousel-item", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCharts extends Components.NexusCharts {
}
export declare class NexusCharts {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCharts, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCharts, "nexus-charts", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusCheckbox extends Components.NexusCheckbox {
}
export declare class NexusCheckbox {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusCheckbox, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusCheckbox, "nexus-checkbox", never, { "attrId": { "alias": "attrId"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "indeterminate": { "alias": "indeterminate"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusChip extends Components.NexusChip {
    /**
     * Trigger removable icon click event.
     */
    triggerRemovableClick: EventEmitter<CustomEvent<any>>;
}
export declare class NexusChip {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusChip, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusChip, "nexus-chip", never, { "disabled": { "alias": "disabled"; "required": false; }; "error": { "alias": "error"; "required": false; }; "removable": { "alias": "removable"; "required": false; }; "success": { "alias": "success"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusChipGroup extends Components.NexusChipGroup {
}
export declare class NexusChipGroup {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusChipGroup, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusChipGroup, "nexus-chip-group", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusDropdown extends Components.NexusDropdown {
    /**
     * set the drop down position with respective offset. @param top
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusDropdown {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusDropdown, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusDropdown, "nexus-dropdown", never, { "dropdownType": { "alias": "dropdownType"; "required": false; }; "height": { "alias": "height"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "show": { "alias": "show"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusErrorMessage extends Components.NexusErrorMessage {
}
export declare class NexusErrorMessage {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusErrorMessage, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusErrorMessage, "nexus-error-message", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFileUpload extends Components.NexusFileUpload {
    /**
     * Event fired if an error occurs. IE11 does not support dynamically setting files on an input so this error will be triggered.
     */
    errorEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusFileUpload {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFileUpload, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFileUpload, "nexus-file-upload", never, { "accept": { "alias": "accept"; "required": false; }; "attrId": { "alias": "attrId"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusFooter extends Components.NexusFooter {
}
export declare class NexusFooter {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooter, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooter, "nexus-footer", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFooterBottom extends Components.NexusFooterBottom {
}
export declare class NexusFooterBottom {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooterBottom, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooterBottom, "nexus-footer-bottom", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFooterColumn extends Components.NexusFooterColumn {
}
export declare class NexusFooterColumn {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooterColumn, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooterColumn, "nexus-footer-column", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFooterContent extends Components.NexusFooterContent {
}
export declare class NexusFooterContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooterContent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooterContent, "nexus-footer-content", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFooterContentTitle extends Components.NexusFooterContentTitle {
}
export declare class NexusFooterContentTitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooterContentTitle, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooterContentTitle, "nexus-footer-content-title", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFooterLogo extends Components.NexusFooterLogo {
}
export declare class NexusFooterLogo {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFooterLogo, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFooterLogo, "nexus-footer-logo", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusFormField extends Components.NexusFormField {
}
export declare class NexusFormField {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusFormField, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusFormField, "nexus-form-field", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusGaugeChart extends Components.NexusGaugeChart {
}
export declare class NexusGaugeChart {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusGaugeChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusGaugeChart, "nexus-gauge-chart", never, { "currentValuePlaceholderStyle": { "alias": "currentValuePlaceholderStyle"; "required": false; }; "currentValueText": { "alias": "currentValueText"; "required": false; }; "customSegmentLabels": { "alias": "customSegmentLabels"; "required": false; }; "customSegmentStops": { "alias": "customSegmentStops"; "required": false; }; "dimensionUnit": { "alias": "dimensionUnit"; "required": false; }; "endColor": { "alias": "endColor"; "required": false; }; "fluidWidth": { "alias": "fluidWidth"; "required": false; }; "forceRender": { "alias": "forceRender"; "required": false; }; "height": { "alias": "height"; "required": false; }; "labelFontSize": { "alias": "labelFontSize"; "required": false; }; "maxSegmentLabels": { "alias": "maxSegmentLabels"; "required": false; }; "maxValue": { "alias": "maxValue"; "required": false; }; "minValue": { "alias": "minValue"; "required": false; }; "needleColor": { "alias": "needleColor"; "required": false; }; "needleHeightRatio": { "alias": "needleHeightRatio"; "required": false; }; "needleTransition": { "alias": "needleTransition"; "required": false; }; "needleTransitionDuration": { "alias": "needleTransitionDuration"; "required": false; }; "paddingHorizontal": { "alias": "paddingHorizontal"; "required": false; }; "paddingVertical": { "alias": "paddingVertical"; "required": false; }; "ringWidth": { "alias": "ringWidth"; "required": false; }; "segmentColors": { "alias": "segmentColors"; "required": false; }; "segmentValueFormatter": { "alias": "segmentValueFormatter"; "required": false; }; "segments": { "alias": "segments"; "required": false; }; "startColor": { "alias": "startColor"; "required": false; }; "svgAriaLabel": { "alias": "svgAriaLabel"; "required": false; }; "textColor": { "alias": "textColor"; "required": false; }; "value": { "alias": "value"; "required": false; }; "valueFormat": { "alias": "valueFormat"; "required": false; }; "valueTextFontSize": { "alias": "valueTextFontSize"; "required": false; }; "valueTextFontWeight": { "alias": "valueTextFontWeight"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusHeader extends Components.NexusHeader {
}
export declare class NexusHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusHeader, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusHeader, "nexus-header", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusHeaderLogo extends Components.NexusHeaderLogo {
}
export declare class NexusHeaderLogo {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusHeaderLogo, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusHeaderLogo, "nexus-header-logo", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusHeaderMenu extends Components.NexusHeaderMenu {
}
export declare class NexusHeaderMenu {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusHeaderMenu, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusHeaderMenu, "nexus-header-menu", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusIcon extends Components.NexusIcon {
}
export declare class NexusIcon {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusIcon, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusIcon, "nexus-icon", never, { "alt": { "alias": "alt"; "required": false; }; "content": { "alias": "content"; "required": false; }; "size": { "alias": "size"; "required": false; }; "sizeLock": { "alias": "sizeLock"; "required": false; }; "src": { "alias": "src"; "required": false; }; "type": { "alias": "type"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusInput extends Components.NexusInput {
    /**
     * Internal event for updating disabled form elements
     */
    _disabledChange: EventEmitter<CustomEvent<any>>;
}
export declare class NexusInput {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusInput, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusInput, "nexus-input", never, { "attrId": { "alias": "attrId"; "required": false; }; "autocomplete": { "alias": "autocomplete"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "max": { "alias": "max"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "min": { "alias": "min"; "required": false; }; "minLength": { "alias": "minLength"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "required": { "alias": "required"; "required": false; }; "type": { "alias": "type"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusLabel extends Components.NexusLabel {
}
export declare class NexusLabel {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusLabel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusLabel, "nexus-label", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusLineChart extends Components.NexusLineChart {
    /**
     * On load even on loading line chart ('nexusLineChartLoaded').
     */
    nexusLineChartLoaded: EventEmitter<CustomEvent<any>>;
}
export declare class NexusLineChart {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusLineChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusLineChart, "nexus-line-chart", never, { "attrId": { "alias": "attrId"; "required": false; }; "axisLabelFontSize": { "alias": "axisLabelFontSize"; "required": false; }; "axisTickFontFamily": { "alias": "axisTickFontFamily"; "required": false; }; "axisTickFontSize": { "alias": "axisTickFontSize"; "required": false; }; "canvasHeight": { "alias": "canvasHeight"; "required": false; }; "canvasWidth": { "alias": "canvasWidth"; "required": false; }; "chartData": { "alias": "chartData"; "required": false; }; "chartId": { "alias": "chartId"; "required": false; }; "colorScheme": { "alias": "colorScheme"; "required": false; }; "data": { "alias": "data"; "required": false; }; "gridlines": { "alias": "gridlines"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hideXAxis": { "alias": "hideXAxis"; "required": false; }; "hideXTicks": { "alias": "hideXTicks"; "required": false; }; "hideYAxis": { "alias": "hideYAxis"; "required": false; }; "hideYTicks": { "alias": "hideYTicks"; "required": false; }; "interpolation": { "alias": "interpolation"; "required": false; }; "inverse": { "alias": "inverse"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "legendFontSize": { "alias": "legendFontSize"; "required": false; }; "legendMetric": { "alias": "legendMetric"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "linearFormat": { "alias": "linearFormat"; "required": false; }; "linearMetric": { "alias": "linearMetric"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "strokeWidth": { "alias": "strokeWidth"; "required": false; }; "tooltips": { "alias": "tooltips"; "required": false; }; "valueFormat": { "alias": "valueFormat"; "required": false; }; "valueMetric": { "alias": "valueMetric"; "required": false; }; "vertices": { "alias": "vertices"; "required": false; }; "width": { "alias": "width"; "required": false; }; "xLabel": { "alias": "xLabel"; "required": false; }; "xMetric": { "alias": "xMetric"; "required": false; }; "xTickFormat": { "alias": "xTickFormat"; "required": false; }; "xTickSize": { "alias": "xTickSize"; "required": false; }; "yLabel": { "alias": "yLabel"; "required": false; }; "yMetric": { "alias": "yMetric"; "required": false; }; "yTickFormat": { "alias": "yTickFormat"; "required": false; }; "yTickSize": { "alias": "yTickSize"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusLoader extends Components.NexusLoader {
}
export declare class NexusLoader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusLoader, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusLoader, "nexus-loader", never, { "fullscreen": { "alias": "fullscreen"; "required": false; }; "show": { "alias": "show"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusMenu extends Components.NexusMenu {
    /**
     * Event fired when the menu is closed
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusMenu {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusMenu, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusMenu, "nexus-menu", never, { "open": { "alias": "open"; "required": false; }; "position": { "alias": "position"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusMenuItem extends Components.NexusMenuItem {
}
export declare class NexusMenuItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusMenuItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusMenuItem, "nexus-menu-item", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusMessage extends Components.NexusMessage {
}
export declare class NexusMessage {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusMessage, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusMessage, "nexus-message", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusModal extends Components.NexusModal {
    /**
     * Event fired when the modal closes.
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusModal {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusModal, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusModal, "nexus-modal", never, { "fullscreen": { "alias": "fullscreen"; "required": false; }; "show": { "alias": "show"; "required": false; }; "size": { "alias": "size"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusModalBody extends Components.NexusModalBody {
}
export declare class NexusModalBody {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusModalBody, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusModalBody, "nexus-modal-body", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusModalFooter extends Components.NexusModalFooter {
}
export declare class NexusModalFooter {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusModalFooter, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusModalFooter, "nexus-modal-footer", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusModalHeader extends Components.NexusModalHeader {
    /**
     * Event fired when the close icon button is clicked.
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusModalHeader {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusModalHeader, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusModalHeader, "nexus-modal-header", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusModalHeaderSubtitle extends Components.NexusModalHeaderSubtitle {
}
export declare class NexusModalHeaderSubtitle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusModalHeaderSubtitle, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusModalHeaderSubtitle, "nexus-modal-header-subtitle", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusNotification extends Components.NexusNotification {
}
export declare class NexusNotification {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusNotification, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusNotification, "nexus-notification", never, { "variant": { "alias": "variant"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusOption extends Components.NexusOption {
    /**
     * Event fired when the option is clicked.
     */
    triggerOptionSelected: EventEmitter<CustomEvent<any>>;
}
export declare class NexusOption {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusOption, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusOption, "nexus-option", never, { "disabled": { "alias": "disabled"; "required": false; }; "keyhover": { "alias": "keyhover"; "required": false; }; "label": { "alias": "label"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusPagination extends Components.NexusPagination {
    /**
     * Event fired when page is changed.
     */
    changeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusPagination {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusPagination, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusPagination, "nexus-pagination", never, { "current": { "alias": "current"; "required": false; }; "max": { "alias": "max"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusPieChart extends Components.NexusPieChart {
    /**
     * On load even on loading pie chart ('nexusPieChartLoaded').
     */
    nexusPieChartLoaded: EventEmitter<CustomEvent<any>>;
}
export declare class NexusPieChart {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusPieChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusPieChart, "nexus-pie-chart", never, { "attrId": { "alias": "attrId"; "required": false; }; "canvasHeight": { "alias": "canvasHeight"; "required": false; }; "canvasWidth": { "alias": "canvasWidth"; "required": false; }; "chartData": { "alias": "chartData"; "required": false; }; "chartId": { "alias": "chartId"; "required": false; }; "colorScheme": { "alias": "colorScheme"; "required": false; }; "data": { "alias": "data"; "required": false; }; "height": { "alias": "height"; "required": false; }; "innerRadius": { "alias": "innerRadius"; "required": false; }; "inverse": { "alias": "inverse"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "legendFontSize": { "alias": "legendFontSize"; "required": false; }; "legendMetric": { "alias": "legendMetric"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "stroke": { "alias": "stroke"; "required": false; }; "strokeWidth": { "alias": "strokeWidth"; "required": false; }; "tooltips": { "alias": "tooltips"; "required": false; }; "valueFormat": { "alias": "valueFormat"; "required": false; }; "valueMetric": { "alias": "valueMetric"; "required": false; }; "width": { "alias": "width"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusPinEntry extends Components.NexusPinEntry {
    /**
     * Event fired when pin is entered.
     */
    pinEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusPinEntry {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusPinEntry, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusPinEntry, "nexus-pin-entry", never, { "disabled": { "alias": "disabled"; "required": false; }; "length": { "alias": "length"; "required": false; }; "type": { "alias": "type"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusProgressBar extends Components.NexusProgressBar {
}
export declare class NexusProgressBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusProgressBar, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusProgressBar, "nexus-progress-bar", never, { "circle": { "alias": "circle"; "required": false; }; "error": { "alias": "error"; "required": false; }; "indeterminate": { "alias": "indeterminate"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusProgressBarLabel extends Components.NexusProgressBarLabel {
}
export declare class NexusProgressBarLabel {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusProgressBarLabel, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusProgressBarLabel, "nexus-progress-bar-label", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusRadio extends Components.NexusRadio {
}
export declare class NexusRadio {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusRadio, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusRadio, "nexus-radio", never, { "attrId": { "alias": "attrId"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "name": { "alias": "name"; "required": false; }; "required": { "alias": "required"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusSearch extends Components.NexusSearch {
}
export declare class NexusSearch {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusSearch, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusSearch, "nexus-search", never, { "debounceInterval": { "alias": "debounceInterval"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusSearchList extends Components.NexusSearchList {
}
export declare class NexusSearchList {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusSearchList, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusSearchList, "nexus-search-list", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusSearchListItem extends Components.NexusSearchListItem {
}
export declare class NexusSearchListItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusSearchListItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusSearchListItem, "nexus-search-list-item", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusSelect extends Components.NexusSelect {
    /**
     * Internal event for updating disabled form elements
     */
    _disabledChange: EventEmitter<CustomEvent<any>>;
    /**
     * Event for updating selected option
     */
    triggerSelection: EventEmitter<CustomEvent<any>>;
    /**
     * Event emited when clicked outside of select
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusSelect {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusSelect, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusSelect, "nexus-select", never, { "attrId": { "alias": "attrId"; "required": false; }; "delimiter": { "alias": "delimiter"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "required": { "alias": "required"; "required": false; }; "type": { "alias": "type"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusSlider extends Components.NexusSlider {
    /**
     * Internal event for updating disabled form elements
     */
    _disabledChange: EventEmitter<CustomEvent<any>>;
}
export declare class NexusSlider {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusSlider, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusSlider, "nexus-slider", never, { "attrId": { "alias": "attrId"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusStackedBarChart extends Components.NexusStackedBarChart {
    /**
     * On load even on loading stacked bar chart ('nexusStackedBarChartLoaded').
     */
    nexusStackedBarChartLoaded: EventEmitter<CustomEvent<any>>;
}
export declare class NexusStackedBarChart {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusStackedBarChart, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusStackedBarChart, "nexus-stacked-bar-chart", never, { "attrId": { "alias": "attrId"; "required": false; }; "axisLabelFontSize": { "alias": "axisLabelFontSize"; "required": false; }; "axisTickFontFamily": { "alias": "axisTickFontFamily"; "required": false; }; "axisTickFontSize": { "alias": "axisTickFontSize"; "required": false; }; "barStroke": { "alias": "barStroke"; "required": false; }; "barStrokeWidth": { "alias": "barStrokeWidth"; "required": false; }; "canvasHeight": { "alias": "canvasHeight"; "required": false; }; "canvasWidth": { "alias": "canvasWidth"; "required": false; }; "chartData": { "alias": "chartData"; "required": false; }; "chartId": { "alias": "chartId"; "required": false; }; "colorScheme": { "alias": "colorScheme"; "required": false; }; "data": { "alias": "data"; "required": false; }; "gridlines": { "alias": "gridlines"; "required": false; }; "height": { "alias": "height"; "required": false; }; "hideXAxis": { "alias": "hideXAxis"; "required": false; }; "hideXTicks": { "alias": "hideXTicks"; "required": false; }; "hideYAxis": { "alias": "hideYAxis"; "required": false; }; "hideYTicks": { "alias": "hideYTicks"; "required": false; }; "inverse": { "alias": "inverse"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "legendFontSize": { "alias": "legendFontSize"; "required": false; }; "legendMetric": { "alias": "legendMetric"; "required": false; }; "legendWidth": { "alias": "legendWidth"; "required": false; }; "linearDomain": { "alias": "linearDomain"; "required": false; }; "linearFormat": { "alias": "linearFormat"; "required": false; }; "linearMetric": { "alias": "linearMetric"; "required": false; }; "linearTickFormat": { "alias": "linearTickFormat"; "required": false; }; "marginBottom": { "alias": "marginBottom"; "required": false; }; "marginLeft": { "alias": "marginLeft"; "required": false; }; "marginRight": { "alias": "marginRight"; "required": false; }; "marginTop": { "alias": "marginTop"; "required": false; }; "maxBarWidth": { "alias": "maxBarWidth"; "required": false; }; "ordinalMetric": { "alias": "ordinalMetric"; "required": false; }; "orientation": { "alias": "orientation"; "required": false; }; "seriesMetric": { "alias": "seriesMetric"; "required": false; }; "stroke": { "alias": "stroke"; "required": false; }; "strokeWidth": { "alias": "strokeWidth"; "required": false; }; "tooltips": { "alias": "tooltips"; "required": false; }; "valueMetric": { "alias": "valueMetric"; "required": false; }; "width": { "alias": "width"; "required": false; }; "xLabel": { "alias": "xLabel"; "required": false; }; "xTickSize": { "alias": "xTickSize"; "required": false; }; "yLabel": { "alias": "yLabel"; "required": false; }; "yTickSize": { "alias": "yTickSize"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusStepper extends Components.NexusStepper {
}
export declare class NexusStepper {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusStepper, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusStepper, "nexus-stepper", never, { "steppertype": { "alias": "steppertype"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusStepperItem extends Components.NexusStepperItem {
}
export declare class NexusStepperItem {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusStepperItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusStepperItem, "nexus-stepper-item", never, { "status": { "alias": "status"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusTabBar extends Components.NexusTabBar {
}
export declare class NexusTabBar {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTabBar, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTabBar, "nexus-tab-bar", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusTable extends Components.NexusTable {
    /**
     * Emit list of selected rows
     */
    rowSelect: EventEmitter<CustomEvent<any[]>>;
    /**
     * Emit current page details on table data change
     */
    tableChangeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusTable {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTable, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTable, "nexus-table", never, { "attrId": { "alias": "attrId"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "currentPage": { "alias": "currentPage"; "required": false; }; "enablePageSizeOption": { "alias": "enablePageSizeOption"; "required": false; }; "maxHeight": { "alias": "maxHeight"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "pageSizeLabel": { "alias": "pageSizeLabel"; "required": false; }; "pageSizeOpt": { "alias": "pageSizeOpt"; "required": false; }; "pagination": { "alias": "pagination"; "required": false; }; "rowSelection": { "alias": "rowSelection"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "sortAscIcon": { "alias": "sortAscIcon"; "required": false; }; "sortDefaultIcon": { "alias": "sortDefaultIcon"; "required": false; }; "sortDescIcon": { "alias": "sortDescIcon"; "required": false; }; "totalItems": { "alias": "totalItems"; "required": false; }; "type": { "alias": "type"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusTextarea extends Components.NexusTextarea {
    /**
     * Internal event for updating disabled form elements
     */
    _disabledChange: EventEmitter<CustomEvent<any>>;
}
export declare class NexusTextarea {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTextarea, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTextarea, "nexus-textarea", never, { "attrId": { "alias": "attrId"; "required": false; }; "cols": { "alias": "cols"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "minLength": { "alias": "minLength"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "required": { "alias": "required"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusToast extends Components.NexusToast {
    /**
     * Event fired when the tooltip close button is clicked.
     */
    closeEvent: EventEmitter<CustomEvent<any>>;
}
export declare class NexusToast {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusToast, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusToast, "nexus-toast", never, { "autoClose": { "alias": "autoClose"; "required": false; }; "closeable": { "alias": "closeable"; "required": false; }; "iconSrc": { "alias": "iconSrc"; "required": false; }; "position": { "alias": "position"; "required": false; }; "show": { "alias": "show"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusToggle extends Components.NexusToggle {
}
export declare class NexusToggle {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusToggle, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusToggle, "nexus-toggle", never, { "attrId": { "alias": "attrId"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "labelActive": { "alias": "labelActive"; "required": false; }; "labelInactive": { "alias": "labelInactive"; "required": false; }; "required": { "alias": "required"; "required": false; }; "size": { "alias": "size"; "required": false; }; "toggled": { "alias": "toggled"; "required": false; }; "type": { "alias": "type"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusTooltip extends Components.NexusTooltip {
}
export declare class NexusTooltip {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTooltip, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTooltip, "nexus-tooltip", never, { "allowClick": { "alias": "allowClick"; "required": false; }; "attrId": { "alias": "attrId"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusTooltipContent extends Components.NexusTooltipContent {
    /**
     * Internal event for closing tooltip content @param positions,@param id
     */
    _closeTooltip: EventEmitter<CustomEvent<any>>;
}
export declare class NexusTooltipContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTooltipContent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTooltipContent, "nexus-tooltip-content", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusTooltipTrigger extends Components.NexusTooltipTrigger {
}
export declare class NexusTooltipTrigger {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTooltipTrigger, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTooltipTrigger, "nexus-tooltip-trigger", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusTree extends Components.NexusTree {
}
export declare class NexusTree {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTree, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTree, "nexus-tree", never, { "open": { "alias": "open"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare interface NexusTreeContent extends Components.NexusTreeContent {
}
export declare class NexusTreeContent {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTreeContent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTreeContent, "nexus-tree-content", never, {}, {}, never, ["*"], false, never>;
}
export declare interface NexusTreeTrigger extends Components.NexusTreeTrigger {
    /**
     * Private event fired when the tree is toggled
     */
    _toggleTree: EventEmitter<CustomEvent<any>>;
}
export declare class NexusTreeTrigger {
    protected z: NgZone;
    protected el: HTMLElement;
    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);
    static ɵfac: i0.ɵɵFactoryDeclaration<NexusTreeTrigger, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NexusTreeTrigger, "nexus-tree-trigger", never, {}, {}, never, ["*"], false, never>;
}
